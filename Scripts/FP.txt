import tensorflow as tf
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from tensorflow import keras
from keras.models import Sequential
from sklearn.model_selection import train_test_split
from pandas.plotting import scatter_matrix
from sklearn.preprocessing import StandardScaler
from keras.wrappers.scikit_learn import KerasRegressor
from tensorflow.keras import layers 
from keras.layers import Dense, Dropout
from keras.optimizers import Adam
from tensorflow.keras.constraints import MaxNorm
from tensorflow.keras.callbacks import EarlyStopping
from tensorflow.keras.regularizers import L2, L1
from sklearn.metrics import r2_score

data = pd.read_csv("FP_Data.csv")
data.head()

plt.figure(figsize=(12,10))
cor = data.corr()
sns.heatmap(cor, annot=True, cmap=plt.cm.CMRmap_r)
plt.show()

x_data = data.iloc[:,1:14]
y_data = data.iloc[:,14:15]
x_train, x_test, y_train, y_test = train_test_split(x_data, y_data, test_size=0.20,random_state=20)

l2 = L2(0.001)
model = keras.Sequential([
    keras.layers.Flatten(input_shape=(13,1)), 
    keras.layers.Dense(202, activation='relu', kernel_regularizer=l2, kernel_initializer='glorot_uniform'),
    keras.layers.Dense(166, activation='relu', kernel_regularizer=l2, kernel_initializer='glorot_uniform'),
    keras.layers.Dense(1, activation='relu', kernel_regularizer=l2)
])
adam = Adam(lr=0.001)
model.compile(optimizer=adam, loss='mean_squared_error', metrics=['mean_absolute_error'])
monitor = EarlyStopping(monitor='val_loss', min_delta=1, patience=50, verbose=1, mode='min', restore_best_weights=True  )

fp = model.fit(x_train, y_train, callbacks = [monitor], epochs=350, batch_size=8, validation_data=(x_test, y_test),  verbose=2)  

test_loss = model.evaluate(x_test,  y_test, verbose=1)test_loss = model.evaluate(x_test,  y_test, verbose=1)

y_predicted = model.predict(x_test)
y_train_predicted = model.predict(x_train)
y_data_predicted = model.predict(x_data)

print('Correlation coefficient of the training set (R2):', r2_score(y_train, y_train_predicted))
print('Correlation coefficient of the testing set (R2):', r2_score(y_test, y_predicted))
print('Correlation coefficient of the All data set (R2):', r2_score(y_data, y_data_predicted))

model.summary()

y_data_predicted
